# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# clear all permissions for GITHUB_TOKEN
permissions: {}

jobs:
  initial-build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Checkout maven
        uses: actions/checkout@v4
        with:
          path: maven/
          persist-credentials: false

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/cached
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          enableCrossOsArchive: true

      - name: Set up Maven
        shell: bash
        working-directory: maven
        run: mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.2:wrapper "-Dmaven=4.0.0-beta-4"

      - name: Build with Maven
        shell: bash
        working-directory: maven
        run: ./mvnw verify -e -B -V -DdistributionFileName=apache-maven

      - name: Upload built Maven
        uses: actions/upload-artifact@v4
        with:
          name: built-maven
          path: maven/apache-maven/target/

      - name: Extract tarball
        shell: bash
        working-directory: maven
        run: |
          set +e
          if [ -f ${{ env.TAR_BALL }} ]; then
            temp_dir=$(mktemp -d)
            tar -xzf ${{ env.TAR_BALL }} -C "$temp_dir" --strip 1
            maven_bin_dir=$temp_dir/bin
            if [ -d $maven_bin_dir ]; then
              echo "tar.gz file \"${{ env.TAR_BALL }}\" successfully extracted in temporarily directory \"$temp_dir.\""
              echo "TEMP_MAVEN_BIN_DIR=$maven_bin_dir" >> $GITHUB_ENV
            else
              echo "$maven_bin_dir does not exist."
              exit 1;
            fi
          else
            echo "${{ env.TAR_BALL }} does not exist."
            exit 1;
          fi
        env:
          TAR_BALL: apache-maven/target/apache-maven-bin.tar.gz

      - name: Build again with Maven SNAPSHOT
        shell: bash
        working-directory: maven
        run: |
          export PATH=${{ env.TEMP_MAVEN_BIN_DIR }}:$PATH
          mvn clean verify site -e -B -V -DdistributionFileName=apache-maven -Preporting


  matrix-build:
    needs: initial-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: ['17', '21']
    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Checkout maven
        uses: actions/checkout@v4
        with:
          path: maven/
          persist-credentials: false

      - name: Collect environment context variables
        shell: bash
        env:
          PR_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
        run: |
          set +e
          repo=maven-integration-testing
          target_branch=master
          target_user=apache
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            user=${PR_HEAD_LABEL%:*}
            branch=${PR_HEAD_LABEL#*:}
          else
            user=${GITHUB_REPOSITORY%/*}
            branch=${GITHUB_REF#refs/heads/}
          fi
          if [ $branch != "master" ]; then
            git ls-remote https://github.com/$user/$repo.git | grep "refs/heads/${branch}$" > /dev/null
            if [ $? -eq 0 ]; then
              echo "Found a branch \"$branch\" in fork \"$user/$repo\", configuring this for the integration tests to be run against."
              target_branch=$branch
              target_user=$user
            else
              echo "Could not find fork \"$user/$repo\" or a branch \"$branch\" in this fork. Falling back to \"$target_branch\" in \"$target_user/$repo\"."
            fi
          else
            echo "Integration tests will run against $target_user/$repo for master builds."
          fi
          echo "REPO_BRANCH=$target_branch" >> $GITHUB_ENV
          echo "REPO_USER=$target_user" >> $GITHUB_ENV

      - name: Checkout maven-integration-testing
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_USER }}/maven-integration-testing
          path: maven-integration-testing/
          ref: ${{ env.REPO_BRANCH }}
          persist-credentials: false

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/cached
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-
          enableCrossOsArchive: true

      - name: Set up Maven
        shell: bash
        working-directory: maven
        run: mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.2:wrapper "-Dmaven=4.0.0-beta-4"

      - name: Build with Maven
        shell: bash
        working-directory: maven
        run: ./mvnw verify -e -B -V -DdistributionFileName=apache-maven

      - name: Upload built Maven
        uses: actions/upload-artifact@v4
        if: ${{ inputs.upload-distribution }}
        with:
          name: built-maven
          path: maven/apache-maven/target/

      - name: Extract tarball
        shell: bash
        working-directory: maven
        run: |
          set +e
          if [ -f ${{ env.TAR_BALL }} ]; then
            temp_dir=$(mktemp -d)
            tar -xzf ${{ env.TAR_BALL }} -C "$temp_dir" --strip 1
            maven_bin_dir=$temp_dir/bin
            if [ -d $maven_bin_dir ]; then
              echo "tar.gz file \"${{ env.TAR_BALL }}\" successfully extracted in temporarily directory \"$temp_dir.\""
              echo "TEMP_MAVEN_BIN_DIR=$maven_bin_dir" >> $GITHUB_ENV
            else
              echo "$maven_bin_dir does not exist."
              exit 1;
            fi
          else
            echo "${{ env.TAR_BALL }} does not exist."
            exit 1;
          fi
        env:
          TAR_BALL: apache-maven/target/apache-maven-bin.tar.gz

      - name: Build again with Maven SNAPSHOT
        shell: bash
        working-directory: maven
        run: |
          export PATH=${{ env.TEMP_MAVEN_BIN_DIR }}:$PATH
          mvn clean verify site -e -B -V -DdistributionFileName=apache-maven -Preporting

      - name: Running integration tests
        shell: bash
        working-directory: maven-integration-testing
        run: |
          export PATH=${{ env.TEMP_MAVEN_BIN_DIR }}:$PATH
          mvn install -e -B -V -Prun-its,embedded

      - name: Upload artifact on integration testing
        uses: actions/upload-artifact@v4
        if: failure() && matrix.os != 'windows-latest'
        with:
          name: ${{ github.run_number }}-integration-test-artifact-${{ runner.os }}-${{ matrix.java }}
          path: ./maven-integration-testing/core-it-suite/target/test-classes/
