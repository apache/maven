# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# allow single build per branch or PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# clear all permissions for GITHUB_TOKEN
permissions: {}

env:
  MIMIR_VERSION: 0.9.0
  MIMIR_BASEDIR: ~/.mimir
  MIMIR_LOCAL: ~/.mimir/local

jobs:
  initial-build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Checkout maven
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false

      - name: Prepare Mimir for Maven 3.x
        shell: bash
        run: |
          mkdir -p ${{ env.MIMIR_BASEDIR }}
          cp .github/ci-mimir-session.properties ${{ env.MIMIR_BASEDIR }}/session.properties
          cp .github/ci-mimir-daemon.properties ${{ env.MIMIR_BASEDIR }}/daemon.properties
          cp .github/ci-extensions.xml .mvn/extensions.xml

      - name: Restore Mimir caches
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        id: restore-cache
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: mimir-${{ runner.os }}-initial

      - name: Set up Maven
        shell: bash
        run: mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.4:wrapper "-Dmaven=4.0.0-rc-4"

      - name: Prepare Mimir for Maven 4.x
        shell: bash
        run: |
          rm .mvn/extensions.xml
          mkdir -p ~/.m2
          cp .github/ci-extensions.xml ~/.m2/extensions.xml

      - name: Build Maven distributions
        shell: bash
        run: ./mvnw verify -e -B -V

      - name: List contents of target directory
        shell: bash
        run: ls -la apache-maven/target

      - name: Save Mimir caches
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        if: ${{ github.event_name != 'pull_request' && !cancelled() && !failure() }}
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      - name: Upload Maven distributions
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: maven-distributions
          path: |
            apache-maven/target/apache-maven*.zip
            apache-maven/target/apache-maven*.tar.gz

  full-build:
    needs: initial-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: ['17', '21', '24']
    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Install Graphviz (MacOS)
        if: runner.os == 'macOS'
        run: brew install graphviz

      - name: Install Graphviz (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get install graphviz

      - name: Install Graphviz (Windows)
        if: runner.os == 'Windows'
        run: choco install graphviz

      - name: Checkout maven
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false

      - name: Prepare Mimir for Maven 4.x
        shell: bash
        run: |
          mkdir -p ${{ env.MIMIR_BASEDIR }}
          cp .github/ci-mimir-session.properties ${{ env.MIMIR_BASEDIR }}/session.properties
          cp .github/ci-mimir-daemon.properties ${{ env.MIMIR_BASEDIR }}/daemon.properties
          mkdir -p ~/.m2
          cp .github/ci-extensions.xml ~/.m2/extensions.xml

      - name: Restore Mimir caches
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        id: restore-cache
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: mimir-full-${{ matrix.os }}-${{ matrix.java }}
          restore-keys: |
            mimir-full-${{ matrix.os }}-
            mimir-full-

      - name: Download Maven distribution
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
        with:
          name: maven-distributions
          path: maven-dist

      - name: List downloaded files
        shell: bash
        run: ls -la maven-dist

      - name: Extract Maven distribution
        shell: bash
        run: |
          mkdir -p maven-local
          if [ "${{ runner.os }}" = "Windows" ]; then
            unzip maven-dist/apache-maven-*-bin.zip -d maven-local
            # Get the name of the extracted directory
            MAVEN_DIR=$(ls maven-local)
            # Move contents up one level
            mv "maven-local/$MAVEN_DIR"/* maven-local/
            rm -r "maven-local/$MAVEN_DIR"
          else
            tar xzf maven-dist/apache-maven-*-bin.tar.gz -C maven-local --strip-components 1
          fi
          echo "MAVEN_HOME=$PWD/maven-local" >> $GITHUB_ENV
          echo "$PWD/maven-local/bin" >> $GITHUB_PATH

      - name: Build with downloaded Maven
        shell: bash
        run: mvn verify -Papache-release -Dgpg.skip=true -e -B -V

      - name: Build site with downloaded Maven
        shell: bash
        run: mvn site -e -B -V -Preporting

      - name: Save Mimir caches
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        if: ${{ github.event_name != 'pull_request' && !cancelled() && !failure() }}
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure() || cancelled()
        with:
          name: ${{ github.run_number }}-full-build-artifact-${{ runner.os }}-${{ matrix.java }}
          path: '**/target/surefire-reports/*'

  integration-tests:
    needs: initial-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: ['17', '21', '24']
    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Checkout maven
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false

      - name: Prepare Mimir for Maven 4.x
        shell: bash
        run: |
          mkdir -p ${{ env.MIMIR_BASEDIR }}
          cp .github/ci-mimir-session.properties ${{ env.MIMIR_BASEDIR }}/session.properties
          cp .github/ci-mimir-daemon.properties ${{ env.MIMIR_BASEDIR }}/daemon.properties
          mkdir -p ~/.m2
          cp .github/ci-extensions.xml ~/.m2/extensions.xml

      - name: Restore Mimir caches
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        id: restore-cache
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: mimir-its-${{ matrix.os }}-${{ matrix.java }}
          restore-keys: |
            mimir-its-${{ matrix.os }}-
            mimir-its-

      - name: Download Maven distribution
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
        with:
          name: maven-distributions
          path: maven-dist

      - name: List downloaded files
        shell: bash
        run: ls -la maven-dist

      - name: Extract Maven distribution
        shell: bash
        run: |
          mkdir -p maven-local
          if [ "${{ runner.os }}" = "Windows" ]; then
            unzip maven-dist/apache-maven-*-bin.zip -d maven-local
            # Get the name of the extracted directory
            MAVEN_DIR=$(ls maven-local)
            # Move contents up one level
            mv "maven-local/$MAVEN_DIR"/* maven-local/
            rm -r "maven-local/$MAVEN_DIR"
          else
            tar xzf maven-dist/apache-maven-*-bin.tar.gz -C maven-local --strip-components 1
          fi
          echo "MAVEN_HOME=$PWD/maven-local" >> $GITHUB_ENV
          echo "$PWD/maven-local/bin" >> $GITHUB_PATH

      - name: Build Maven and ITs and run them
        shell: bash
        run: mvn install -e -B -V -Prun-its,mimir

      - name: Save Mimir caches
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        if: ${{ github.event_name != 'pull_request' && !cancelled() && !failure() }}
        with:
          path: ${{ env.MIMIR_LOCAL }}
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure() || cancelled()
        with:
          name: ${{ github.run_number }}-integration-test-artifact-${{ runner.os }}-${{ matrix.java }}
          path: ./its/core-it-suite/target/test-classes/
